#dFS GRAPHS TRAVERSAL IMPLIMENTATION using stack
graph = {
         '5':['3','7'],
         '3':['2','4'],
         '7':['8'],
         '2':[],
         '4':['8'],
         '8':[]
       }
visited=set()
def dfs(visited,graph,node):
  if node not in visited:
      print(node)
      visited.add(node)
      for neighbour in graph[node]:
        dfs(visited,graph,neighbour)
dfs(visited,graph,'5')
  
-->>output
5
3
2
4
8
7

##bubble sort
def bubblesort(list):
   #swap the elemments to arrange in order
   for i in range(len(list)-1,0,-1):
     print("value of i: ")
     print(i)
     for j in range (i):
       print(j)
       if list[j]>list[j+1]:
         temp=list[j]
         list[j]=list[j+1]
         list[j+1]=temp
list=[10,5,-3,-2,0,100,10]
bubblesort(list)
print(list)



-->>output
value of i: 
6
0
1
2
3
4
5
value of i: 
5
0
1
2
3
4
value of i: 
4
0
1
2
3
value of i: 
3
0
1
2
value of i: 
2
0
1
value of i: 
1
0
[-3, -2, 0, 5, 10, 10, 100]


##insertsort
def insertionsort(arr):
  for i in range(1,len(arr)):
    key=arr[i]
    j=i-1
    while j>=0 and key<arr[j]:
      arr[j+1]=arr[j]
      j-=1
      arr[j+1]=key
arr=[12, 11, 13, 5, 6]
insertionsort(arr) 
print("sorted array is:")
for i in range(len(arr)):
  print("%d" %arr[i])


-->>output
5
6
11
12
13

##selection sort
b=[]
def selectionsort(arr):
  k=0
  for i in range(0,len(arr)):
    k=min(arr)
    b.append(k)
    arr.remove(k)

arr=[20, 30, 10, 50, 40]
selectionsort(arr)
print(b)

#output
-->>
[10, 20, 30, 40, 50]


##mergesort

def merge_sort(unsorted_list):
  if len(unsorted_list)<=1:
    return unsorted_list
#find the middle point and devide it 
  middle=len(unsorted_list)//2
  left_list=unsorted_list[:middle]
  right_list=unsorted_list[middle :]
  left_list=merge_sort(left_list)
  right_list=merge_sort(right_list)
  return list(merge(left_list,right_list))
#  merge the sorted halves
def merge (left_half,right_half):
  res=[]
  while len (left_half)!=0 and len(right_half) !=0:
    if left_half[0]<right_half[0]:
      res.append(left_half[0])
      left_half.remove(left_half[0])
    else:
      res.append(right_half[0])
      right_half.remove(right_half[0])
  if len(left_half)==0:
    res=res+right_half
  else:
    res=res+left_half
  return res
unsorted_list=[67,34,45,23,7,11,90]
print(merge_sort(unsorted_list))
unsorted_list=[-3,34,24,-65,218]
print(merge_sort(unsorted_list))

#output
-->>>
[7, 11, 23, 34, 45, 67, 90]
[-65, -3, 24, 34, 218]



##quicksort
def partition(arr,low,high):
  i=(low-1)
  pivot=arr[high] #pivot element
  for j in range(low,high):
    #if current element is smaller
    if arr[j]<=pivot:
      #increment
      i=i+1
      arr[i],arr[j]=arr[j],arr[i]
    arr[i+1],arr[high]=arr[high],arr[i+1]
  arr[i+1],arr[high]=arr[high],arr[i+1 ]
  return (i+1)
#sort
def quicksort(arr,low,high):
  if low<high:
    #index
    pi=partition(arr,low,high)
    #sort the partitions
    quicksort(arr,low,pi-1)
    quicksort(arr,pi+1,high)
#main
arr=[2,5,3,8,6,5,7]
n=len(arr)
quicksort(arr,0,n-1)
print('sorted array:')
for i in range(n):
  print(arr[i],end=" ")


sorted array:
2 3 5 5 7 6 8 





#linear search
pos=-1
def search(list,n):
  i=0
  while i<len(list):
    if list [i]==n:
      globals()['pos']=i
      return True
    i=i+1
  return False

list =[100,40,34,10]
n=100
if search(list,n):
  print("element is found at index :",pos+1)
else:
  print("not found")


#output
-->>
element is found at index : 1

